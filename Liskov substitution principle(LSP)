/**
 * Player.java
 * 
 * Abstract base class representing a player in cricket.
 */
public abstract class Player {
    private String name;
    private int age;

    /**
     * Constructor for Player class.
     * 
     * @param name The name of the player.
     * @param age  The age of the player.
     */
    public Player(String name, int age) {
        this.name = name;
        this.age = age;
    }

    /**
     * Get the name of the player.
     * 
     * @return The name of the player.
     */
    public String getName() {
        return name;
    }

    /**
     * Get the age of the player.
     * 
     * @return The age of the player.
     */
    public int getAge() {
        return age;
    }

    /**
     * Abstract method representing the action of playing, to be implemented by subclasses.
     */
    public abstract void play();
}

/**
 * Batsman.java
 * 
 * Class representing a batsman player in cricket, extending the Player class.
 */
public class Batsman extends Player {
    private int runsScored;

    /**
     * Constructor for Batsman class.
     * 
     * @param name       The name of the batsman.
     * @param age        The age of the batsman.
     * @param runsScored The runs scored by the batsman.
     */
    public Batsman(String name, int age, int runsScored) {
        super(name, age);
        this.runsScored = runsScored;
    }

    /**
     * Get the runs scored by the batsman.
     * 
     * @return The runs scored by the batsman.
     */
    public int getRunsScored() {
        return runsScored;
    }

    /**
     * Implementation of the play method for batsman.
     */
    @Override
    public void play() {
        System.out.println(getName() + " is batting.");
    }
}

/**
 * Bowler.java
 * 
 * Class representing a bowler player in cricket, extending the Player class.
 */
public class Bowler extends Player {
    private int wicketsTaken;

    /**
     * Constructor for Bowler class.
     * 
     * @param name         The name of the bowler.
     * @param age          The age of the bowler.
     * @param wicketsTaken The wickets taken by the bowler.
     */
    public Bowler(String name, int age, int wicketsTaken) {
        super(name, age);
        this.wicketsTaken = wicketsTaken;
    }

    /**
     * Get the wickets taken by the bowler.
     * 
     * @return The wickets taken by the bowler.
     */
    public int getWicketsTaken() {
        return wicketsTaken;
    }

    /**
     * Implementation of the play method for bowler.
     */
    @Override
    public void play() {
        System.out.println(getName() + " is bowling.");
    }
}

 *In this example, the Player class is a base class for different types of players in cricket.
Each subclass (Batsman and Bowler) can be substituted for 
the Player class without affecting the correctness of the program.*/
