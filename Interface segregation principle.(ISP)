/**
 * Player.java
 * 
 * Interface representing a player in cricket.
 */
public interface Player {
    String getName();
    int getAge();
    void play();
}

/**
 * Batsman.java
 * 
 * Class representing a batsman player in cricket, implementing the Player interface.
 */
public class Batsman implements Player {
    private String name;
    private int age;
    private int runsScored;

    /**
     * Constructor for Batsman class.
     * 
     * @param name       The name of the batsman.
     * @param age        The age of the batsman.
     * @param runsScored The runs scored by the batsman.
     */
    public Batsman(String name, int age, int runsScored) {
        this.name = name;
        this.age = age;
        this.runsScored = runsScored;
    }

    /**
     * Get the name of the batsman.
     * 
     * @return The name of the batsman.
     */
    public String getName() {
        return name;
    }

    /**
     * Get the age of the batsman.
     * 
     * @return The age of the batsman.
     */
    public int getAge() {
        return age;
    }

    /**
     * Get the runs scored by the batsman.
     * 
     * @return The runs scored by the batsman.
     */
    public int getRunsScored() {
        return runsScored;
    }

    /**
     * Implementation of the play method for batsman.
     */
    @Override
    public void play() {
        System.out.println(name + " is batting.");
    }
}

/**
 * Bowler.java
 * 
 * Class representing a bowler player in cricket, implementing the Player interface.
 */
public class Bowler implements Player {
    private String name;
    private int age;
    private int wicketsTaken;

    /**
     * Constructor for Bowler class.
     * 
     * @param name         The name of the bowler.
     * @param age          The age of the bowler.
     * @param wicketsTaken The wickets taken by the bowler.
     */
    public Bowler(String name, int age, int wicketsTaken) {
        this.name = name;
        this.age = age;
        this.wicketsTaken = wicketsTaken;
    }

    /**
     * Get the name of the bowler.
     * 
     * @return The name of the bowler.
     */
    public String getName() {
        return name;
    }

    /**
     * Get the age of the bowler.
     * 
     * @return The age of the bowler.
     */
    public int getAge() {
        return age;
    }

    /**
     * Get the wickets taken by the bowler.
     * 
     * @return The wickets taken by the bowler.
     */
    public int getWicketsTaken() {
        return wicketsTaken;
    }

    /**
     * Implementation of the play method for bowler.
     */
    @Override
    public void play() {
        System.out.println(name + " is bowling.");
    }
}

/*In this example, we have segregated the Player interface into smaller interfaces
(Player and Bowler). Each class implements only the methods it needs, 
adhering to the Interface Segregation Principle.*/
