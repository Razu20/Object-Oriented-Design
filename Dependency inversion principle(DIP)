/**
 * Player.java
 * 
 * Interface representing a player in cricket.
 */
public interface Player {
    String getName();
    int getAge();
    void play();
}

/**
 * CricketMatch.java
 * 
 * Class representing a cricket match, adhering to the Dependency Inversion Principle.
 */
public class CricketMatch {
    private Player batsman;
    private Player bowler;

    /**
     * Constructor for CricketMatch class.
     * 
     * @param batsman The batsman player participating in the match.
     * @param bowler  The bowler player participating in the match.
     */
    public CricketMatch(Player batsman, Player bowler) {
        this.batsman = batsman;
        this.bowler = bowler;
    }

    /**
     * Method to start the cricket match.
     */
    public void startMatch() {
        System.out.println("Match starts!");
        batsman.play();
        bowler.play();
        System.out.println("Match ends!");
    }
}

/**
 * Batsman.java
 * 
 * Class representing a batsman player in cricket, implementing the Player interface.
 */
public class Batsman implements Player {
    private String name;
    private int age;
    private int runsScored;

    /**
     * Constructor for Batsman class.
     * 
     * @param name       The name of the batsman.
     * @param age        The age of the batsman.
     * @param runsScored The runs scored by the batsman.
     */
    public Batsman(String name, int age, int runsScored) {
        this.name = name;
        this.age = age;
        this.runsScored = runsScored;
    }

    // Getters for name, age, and runs scored omitted for brevity

    /**
     * Implementation of the play method for batsman.
     */
    @Override
    public void play() {
        System.out.println(name + " is batting.");
    }
}

/**
 * Bowler.java
 * 
 * Class representing a bowler player in cricket, implementing the Player interface.
 */
public class Bowler implements Player {
    private String name;
    private int age;
    private int wicketsTaken;

    /**
     * Constructor for Bowler class.
     * 
     * @param name         The name of the bowler.
     * @param age          The age of the bowler.
     * @param wicketsTaken The wickets taken by the bowler.
     */
    public Bowler(String name, int age, int wicketsTaken) {
        this.name = name;
        this.age = age;
        this.wicketsTaken = wicketsTaken;
    }

    // Getters for name, age, and wickets taken omitted for brevity

    /**
     * Implementation of the play method for bowler.
     */
    @Override
    public void play() {
        System.out.println(name + " is bowling.");
    }
}

/*In this example, the CricketMatch class depends on the Player interface rather than
concrete implementations (Batsman and Bowler). This allows us to easily change or extend 
player types without modifying the CricketMatch class, 
thus adhering to the Dependency Inversion Principle.*/
